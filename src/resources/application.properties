# Server configuration
server.port=8080  # The port on which the application will run
server.servlet.context-path=/ecommerce  # The base context path for your application

# Spring Datasource Configuration for MySQL (you can adjust this as per your database choice)

spring.datasource.url=mysql://root:password@localhost:3306/ecommerce_db?ssl-mode=REQUIRED
spring.datasource.username=root # Database username
spring.datasource.password=passord  # Database password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate JPA configuration
spring.jpa.hibernate.ddl-auto=update  # You can change it to "create", "validate", etc., based on your needs
spring.jpa.show-sql=true  # Enables SQL logging for debugging
spring.jpa.properties.hibernate.format_sql=true  # Format SQL queries
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect  # MySQL dialect for Hibernate

# Spring Data JPA
spring.jpa.properties.hibernate.id.new_generator_mappings=true  # Ensures compatibility for auto-generated IDs in Hibernate

# Spring Cloud Config (if applicable for distributed microservices)
spring.cloud.config.enabled=false  # Set to true if using Spring Cloud Config Server for centralized config management

# Logging configuration
logging.level.org.springframework.web=DEBUG  # Log the requests coming to the Spring controllers (you can change to INFO or ERROR as per requirement)
logging.level.com.example.ecommerce=DEBUG  # Log the custom application classes
logging.file.name=ecommerce-app.log  # Store logs in a file

# Security Configuration (if you have Spring Security)
# Uncomment and configure if needed for securing the microservices
# spring.security.user.name=user
# spring.security.user.password=password

# Enable Swagger for API documentation (optional, if using SpringFox or Swagger)
springfox.documentation.enabled=true

# Custom configuration properties for application-specific settings
#app.payment.api.key=your_payment_api_key
#app.notification.sms.api.key=your_sms_api_key
#app.notification.email.api.key=your_email_api_key

# Kubernetes configurations (if deploying to Kubernetes)
# spring.profiles.active=kubernetes  # Specify the profile for Kubernetes environments

# Enable actuator endpoints (optional)
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always

# Configure Redis (if using caching)
# spring.cache.type=redis
# spring.redis.host=localhost
# spring.redis.port=6379

# API rate-limiting (optional, for controlling the rate of API requests)
# spring.webflux.resources.static-locations=classpath:/static/

# Custom properties for your application
